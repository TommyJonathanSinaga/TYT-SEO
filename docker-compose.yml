---
version: "3.8"
services:

  server:
    image: stangirard/osat-server
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        TINI_VERSION: ${TINI_VERSION}
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_HOST: postgres
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      REST_FRAMEWORK_PAGE_SIZE: ${REST_FRAMEWORK_PAGE_SIZE}
    volumes:
    - server-data:/opt/app/data
    - server-logs:/opt/app/logs
    container_name: ${NAMESPACE}-server
    ports:
      - "8000:8000"
    command: ["django"]
    depends_on:
    - worker
    - beats
    - postgres
    - dashboard
    labels:
    - "org.label-schema.group=webservice"
    - "traefik.enable=true"
    networks:
    - internal
    - web
    restart: unless-stopped

  worker:
    image: stangirard/osat-server
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        TINI_VERSION: ${TINI_VERSION}
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_HOST: postgres
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      REST_FRAMEWORK_PAGE_SIZE: ${REST_FRAMEWORK_PAGE_SIZE}
    volumes:
    - server-data:/opt/app/data
    - server-logs:/opt/app/logs
    container_name: ${NAMESPACE}-worker
    depends_on:
    - redis
    labels:
    - "org.label-schema.group=queue"
    - "traefik.enable=false"
    networks:
    - internal
    command: ["worker"]
    restart: unless-stopped

  beats:
    image: stangirard/osat-server
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        TINI_VERSION: ${TINI_VERSION}
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_HOST: postgres
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      REST_FRAMEWORK_PAGE_SIZE: ${REST_FRAMEWORK_PAGE_SIZE}
    volumes:
    - server-data:/opt/app/data
    - server-logs:/opt/app/logs
    container_name: ${NAMESPACE}-beats
    depends_on:
    - redis
    labels:
    - "org.label-schema.group=queue"
    - "traefik.enable=false"
    networks:
    - internal
    command: ["beat"]
    restart: unless-stopped    

  dashboard:
    image: stangirard/osat-dashboard
    # image: osat/osat-dashboard:latest
    container_name: ${NAMESPACE}-dashboard
    build:
      context: ./admin
      dockerfile: Dockerfile
      # dockerfile: Dockerfile
      args:
        NODE_VERSION: ${NODE_VERSION}
        TINI_VERSION: ${TINI_VERSION}
        CADDY_VERSION: "v2.3.0-rc.1" # v2.3.0-rc.1
        CADDY_PLUGINS: "cors,realip,expires,cache"
    volumes:
    - ./admin/Caddyfile:/etc/Caddyfile:rw
    # - ./dashboard/dist:/opt/osat/www
    expose:
    - 80
    ports:
    - 3000:80
    networks:
    - web
    labels:
    - "org.label-schema.group=front"
    - "traefik.enable=true"
    command: ["run", "--config=/etc/Caddyfile", "--watch"]
    restart: unless-stopped

  postgres:
    image: postgres:13-alpine
    container_name: ${NAMESPACE}-postgres
    # ports:
    # - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    # expose:
    # - ${POSTGRES_PORT}
    networks:
    - internal
    environment:
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=${POSTGRES_DB}
    volumes:
    - postgres-data:/var/lib/postgresql/data/
    labels:
    - "org.label-schema.group=storage"
    - "traefik.enable=false"
    restart: unless-stopped

  redis:
    # image: osat/redis:${REDIS_VERSION}-alpine
    build:
      context: ./.docker/alpine/redis
      dockerfile: Dockerfile
      args:
        REDIS_VERSION: ${REDIS_VERSION}
        REDIS_LOG_PREFIX_PATH: ${REDIS_LOG_PREFIX_PATH}
    container_name: ${NAMESPACE}-redis
    hostname: redis
    networks:
    - internal    
    volumes:
    - redis-data:/data
    - redis-logs:${REDIS_LOG_PREFIX_PATH}
    labels:
    - "org.label-schema.group=storage"
    - "traefik.enable=false"
    command:
    - "redis-server"
    - "--maxmemory ${REDIS_MEMORY_MAX}"
    - "--maxmemory-policy allkeys-lru"
    - "--logfile ${REDIS_LOG_FILE}"
    restart: unless-stopped

networks:
  internal:
    driver: bridge
  web:
    external: true

volumes:
  # server data
  server-data:
  server-logs:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared/logs/server
  # Letsencrypt certificates
  certs-data:
  # PostreSQL
  postgres-data:
  # Redis
  mysql-data:
  mysql-logs:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared/logs/mysql
  redis-data:
  redis-logs:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared/logs/redis  
